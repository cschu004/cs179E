%{
  	#include "y.tab.h"
	#include "string.h"
	#include "dirent.h"
	YYSTYPE yylval;
	int import_or_package = 0;
	int brace_count = 0;
	int endbrace = 0;
%}

%option noyywrap

%%
package	
import
public		{  import_or_package = 1;if( brace_count > 0 ) return(PUBLIC); }
class		{  if( brace_count > 0 ) return(CLASS); }
extends
protected	{  import_or_package = 1;if( brace_count > 0 ) return(PROTECTED);}
void		{  import_or_package = 1;if( brace_count > 0 )return(VOID);}
boolean		return(BOOLEAN);
true		return(TRUE);
false		return(FALSE);
return		return(RETURN);
[a-zA-Z]+"."[a-zA-Z"(""." | ")"]*")" {
	if( brace_count > 0 ) 
		{ yylval.str = strdup(yytext); return( IDENTIFIER );	}
}
"("[a-zA-Z]+" "[a-zA-Z]+")" {
	if( brace_count > 0 ) 
		{ yylval.str = strdup(yytext); return( IDENTIFIER );	}
}
[a-zA-Z]+"()."[a-zA-Z]* {
	if( brace_count > 0 ) 
		{ yylval.str = strdup(yytext); return( IDENTIFIER );	}
}
View		
@Override	
["][a-zA-Z0-9]*["]
[=]		return(ASSIGN);
[{]		{  import_or_package = 1; brace_count++; if( brace_count > 1 ) return(BEGIN_BRACE); }
[}]		{ endbrace++; if( endbrace-(brace_count-1) == 0 ) return(END_BRACE); return 0;}
[;]		{  if( brace_count > 0 ) return(SEMICOLON); }
[:]		return(COLON);
[,]		return(COMMA);
[(]		return(L_PAREN);
[)]		return(R_PAREN);
[+]		return(PLUS);
[-]		return(MINUS);
[/]		return(DIV);
[*]		return(MULT);
[=][=]          return(EQUAL);
[<]             return(LESS_THAN);
[>]             return(GREATER_THAN);
[<][=]          return(LESS_THAN_EQUAL);
[>][=]          return(GREATR_THAN_EQUAL);
[/][/]+.*	
[a-zA-Z]+"."[a-zA-Z]+["."|"_"|","|" "[a-zA-Z0-9]+]*	{
	if( brace_count > 0 ) 
		{ yylval.str = strdup(yytext); return( IDENTIFIER );	}
}
[a-zA-Z]+[a-zA-Z0-9]*	{  
	if( brace_count > 0 )
	{ 
		yylval.str = strdup(yytext); 
		return( IDENTIFIER );
	}
}
[0-9]+		{  yylval.str = strdup(yytext); if( brace_count > 0 ) return( IDENTIFIER );}
[ ]		
\n		
\t		
%%
